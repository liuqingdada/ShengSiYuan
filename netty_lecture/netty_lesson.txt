强势技能的学习



重视基础



节奏感



思维方式的改进



效率工具的使用



主动输出




gradlew -> gradle wrapper    gradle包装器, 使用此脚本在不安装gradle的情况下, 也可以构建工程


# 下载目录
distributionBase=GRADLE_USER_HOME
# 下载目录的相对路径
distributionPath=wrapper/dists
# 解压目录
zipStoreBase=GRADLE_USER_HOME
# 解压目录的相对路径
zipStorePath=wrapper/dists
# 需要的gradle版本
# xxx.bin   xxx.all(bin sources doc)
distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-bin.zip
# 校验和
distributionSha256Sum=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# shasum -a 256 file    ->    7a2c66d1a78f811d5f37d14630ad21cec5e77a2a4dc61e787e2257a6341016ce

# gradle wrapper
# gradle wrapper --gradle-version 4.4

# gradle clean build
# ./gradlew clean build






早期:
RMI: remote method invacation, 只针对java

client: stub

server: skeleton

序列化与反序列化  也叫做 编码与解码

Android AIDL

---------

RPC: Remote Procedure Call, 远程过程调用, RPC框架很多都是跨语言的

1. 定义一个接口说明文件(IDL), 描述了对象(结构体)、对象成员、接口方法等一系列信息

2. 通过RPC框架所提供的编译器将接口说明文件编译成具体语言文件

3. 在客户端与服务器端分别引入RPC编译器所生成的文件即可像调用本地方法一样调用远程方法


---------------

git submodule: git 仓库中的子仓库

git subtree




java.io
    最核心的概念是 Stream, 面向流的编程, Java 中, 一个流要么是输入流, 要么是输出流, 职责单一

java.nio
    3个核心概念: Selector、 Channel、 Buffer
    java.nio中, 我们是面向块 (block) 或者缓冲区 (buffer) 编程的


    Selector 可以关联多个 Channel, 通过事件切换到不同的 Channel
    Channel 可以理解为 io 中的 Stream, 但是 Channel 可以通过 Buffer 完成读和写
    Channel 关联一个 Buffer


    Buffer 本身是一块内存, 底层是个数组, 数据的 读写 都由 Buffer 实现
    除了数组之外, Buffer还提供了对数据结构化访问方式, 并且可以追踪到系统的读写过程
    注意: 相对方法的操作会修改 limit 和 position;  绝对方法完全忽略掉 limit 和 position



ASCII 美国信息交换标准代码    7 Bit表示一个字符  128 种

ISO-8859-1   8 Bit 表示一个字符  256 种

gb2312(2 byte 一个汉字)  gbk  gb18030

big5

unicode  Unicode 也有UCS-4规范, 就是用 4个字节来编码字符

以上都是编码方式

------------
UTF: Unicode 的实现方式, 基于 Unicode 的存储方式

Zero Width No-Break Spac
00 00 FE FF    = UTF-32, big-endian
FF FE 00 00    = UTF-32, little-endian
EF BB BF       = UTF-8,
FE FF          = UTF-16, big-endian
FF FE          = UTF-16, little-endian
---------------------

UTF-8  变长字节表示

BOM (Byte Order Mark), 某些系统引起的不可见字符(Zero Width No-Break Spac)
    Windows 下可选择带不带 BOM

====================
====================
====================


EventLoopGroup boosGroup = new NioEventLoopGroup(1);  // 连接线程
EventLoopGroup workerGroup = new NioEventLoopGroup(); // 其他操作的线程 (读、写、等等)
所以自定义Handler所处理的业务不应该耗时, 这样会卡 Netty 的线程
我么应该自定义线程组处理自己的业务


Reactor 模式的角色构成:

1. Handle: 句柄 or 描述符  表示操作系统提供的资源, 该资源表示一个个的操作系统事件, 比如文件描述符, 还有网络编程中的
           Socket 描述符此事件可以来源于内部(操作系统产生的定时器事件), 也可以来源于
           外部(client 和 server 之间的交互); Handle 是事件的发源地, 监听事件就是监听 Handle

2. Synchronous Event Demultiplexer: 同步事件分离器, 它本身是一个系统调用, 用于等待事件的发生,
                                    调用方在调用他的时候会被阻塞, 一直等到同步事件分离器上有事件产生为止
                                    对于 Linux 来说同步事件分离器值得就是常用的 I/O 多路复用机制,
                                    比如说 select、poll、epoll等
                                    在Java NIO中同步事件分离器对应的就是 Selector, 阻塞的方法就是 select

3. Event Handler: 事件处理器, 它本身由多个回调方法构成, 这些回调方法构成了与应用相关的对于某个事件的反馈机制
                  Java NIO 没有这个组件; 但是对应于 Netty 中提供的 ChannelHandler, 大量回调

4. Concrete Event Handler: 具体事件处理器, 事件处理器的具体实现, 由框架提供, 或者我们自定义,
                           它本身实现了事件处理器的各个回调方法, 还有我们的特定业务逻辑

5. Initiation Dispather 初始分发器, 实际上就是 Reactor 角色, 本身定义了一些规范, 这些规范用于控制事件的调度方式,
                        同时提供了应用进行事件处理器的注册、删除等设施
                        他会通过同步事件分离器来等待事件的发生, 一旦事件发生, 就会分离出一个事件, 然后调用事件处理器

----------

Reactor模式的流程

1. 当应用向Initiation Dispatcher注册具体的事件处理器时,应用会标识出该事件处理器希望Initiation Dispatcher
   在某个事件发生时向其通知的该事件,该事件与Handle关联。

2. Initiation Dispatcher会要求每个事件处理器向其传递内部的Handle。该Handle向操作系统标识了事件处理器。

3. 当所有的事件处理器注册完毕后,应用会调用handle_events方法来启动Initiation Dispatcher的事件循环。
   这时,Initiation Dispatcher会将每个注册的事件管理器的Handle合并起来,并使用同步事件分离器等待这些事件的发生。
   比如说,TCP协议层会使用select同步事件分离器操作来等待客户端发送的数据到达连接的 socket handle 上

4. 当与某个事件源对应的Handle变为ready状态时（比如说,TCP socket变为等待读状态时）,
   同步事件分离器就会通知Initiation Dispatcher。

5. Initiation Dispatcher会触发事件处理器的回调方法,从而响应这个处于ready状态的Handle。当事件发生时,
   Initiation Dispatcher会将被事件激活的Handle作为【key】来寻找并分发恰当的事件处理器回调方法。

6. Initiation Dispatcher会回调事件处理器的handle_events回调方法来执行特定于应用的功能（开发者自己所编写的功能）,
   从而响应这个事件。所发生的事件类型可以作为该方法参数并被该方法内部使用来执行额外的特定于服务的分离与分发。




Netty 线程模型
1. 一个 EventLoopGroup 包含了一个或者多个 EventLoop
2. 一个 EventLoop 在它的整个生命周期当中都只会与唯一一个 Thread (
       就是我们常说的 IO 线程 { SingleThreadEventExecutor }
   ) 进行绑定
3. 所有由 EventLoop 所处理的各种 IO 事件都将在它所关联的 Thread 上进行处理
4. 一个 Channel 在它的整个生命周期中只会注册在一个 EventLoop 上;
   所以 Channel 里面的那些 Handler 的方法只会由同一个线程执行, 不会产生多线程问题
5. 一个 EventLoop 在运行过程当中, 会被分配给一个或者多个 Channel

在Netty中, Channel的实现一定是线程安全的; 基于此, 我们可以存储一个Channel的引用, 并且在需要向远程端点发送数据时,
通过这个引用来调用Channel相应的方法; 即便当时有很多线程都在使用它也不会出现多线程问题; 而且, 消息一定会按照顺序发送出去

我们在业务开发中, 不要将长时间执行的耗时任务放入到EventLoop的执行队列中, 因为它将会一直阻塞该线程所对应的所有Channel上
的其他执行任务, 如果我们需要进行阻塞调用或是耗时的操作(实际开发中很常见), 那么我们就需要使用一个专门的
EventExecutor(业务线程池)

JDK所提供的Future只能同过手工方式检查执行结果, 而这个操作是会阻塞的; Netty则对ChannelFuture进行了增强, 通过
ChannelFutureListener以回调的方式来获取执行结果, 去除了手工检查阻塞的操作; 值得注意的是, ChannelFutureListener
的operationComplete方法是由I/O线程执行的, 因此要注意的是不要在这里执行耗时操作, 否则需要通过另外的线程或线程池来执行

在Netty中有两种发送消息的方式, 可以直接写到Channel中, 也可以写到与ChannelHandler所关联的那个
ChannelHandlerContext中. 对于前一种方式来说, 消息会从ChannelPipeline的末尾开始流动; 对于后一种方式来说,
消息将从ChannelPipeline中的下一个ChannelHandler开始流动(短路操作).
结论:
1. ChannelHandlerContext与ChannelHandler之间的关联绑定关系是永远都不会发生改变的, 因此对其进行缓存是没有任何问题的
2. 对于与Channel的同名方法来说, ChannelHandlerContext的方法将会产生更短的事件流,
   所以我们应该在可能的情况下利用这个特性来提升应用性能



Netty ByteBuf中提供了三种缓冲区类型:
1. Heap Buffer
2. Direct Buffer
3. Composite Buffer

Heap Buffer(堆缓冲区)
这是最常用的类型, ByteBuf将数据存储到JVM的堆空间中, 并且将实际的数据存放到 byte array 中来实现
优点: 由于数据是存储在JVM的堆中,因此可以快速的创建与快速的释放, 并且它提供了直接访问内部字节数据的方法
缺点: 每次读写数据时, 都需要先将数据复制到直接缓冲区中再进行网络传输

Direct Buffer(直接缓冲区)
在JVM堆之外直接分配内存空间, 直接缓冲区并不会占用堆的容量空间, 因为他是由操作系统在本地内存进行的数据分配
优点: 在使用Socket进行数据传递时, 性能非常好, 因为数据直接位于操作系统的本地内存中,所以不需要从JVM将数据复制到
     直接缓冲区中, 性能很好
缺点: 因为直接缓冲区是直接在操作系统内存中, 所以内存空间的分配与释放要比堆空间更加复杂, 而且速度要慢一些

总结:
1. Netty通过提供内存池来解决这个问题. 直接缓冲区并不支持通过字节数组的方式来访问数据
2. 对于后端的业务消息的编码来说, 推荐使用 HeapByteBuf
3. 对于I/O通信线程在读写缓冲区时, 推荐使用 DirectByteBuf

Composite Buffer(复合缓冲区)
... ...

JDK的ByteBuffer与Netty的ByteBuf直接的差异比对:
1. Netty的ByteBuf采用了读写索引分离的策略
2. 当读索引与写索引处于同一个位置时, 如果我们继续读取, 会抛出IndexOutOfBoundsException
3. 对于ByteBuf的任何读写操作都会分别单独维护读索引与写索引
4. ByteBuf会自动扩容, 最大的扩容限度是 maxCapacity 值

JDK的ByteBuffer的缺点:
1. ByteBuffer中存储数据的对象声明是final的, 也就是长度是固定不变的, 一旦分配好后不能动态扩容与收缩; 当待存储的
   字节很大的时候就很有可能抛出IndexOutOfBoundsException; 如果要预防这个异常, 那就需要在存储之前完全确定好
   待存储的字节大小; 如果ByteBuffer的空间不足, 我们只有一种解决方案: 创建一个全新的ByteBuffer对象, 然后将之前的
   ByteBuffer中的数据复制过去, 这一切操作都需要由开发者自己来手动完成
2. ByteBuffer只是用一个position指针来标识位置信息, 在进行读写切换时就需要调用flip方法或rewind方法, 使用不方便

NettyByteBuf的优点:
1. 存储字节的数组是动态的, 这里的动态性是体现在write方法中的, write方法在执行时会判断Buffer容量, 如果不足则自动扩容
2. ByteBuf的读写索引是完全分开的, 使用起来很方便



AtomicIntegerFeildUpdater要点总结:
1. 更新器更新的必须是int类型变量, 不能是包装类型
2. 更新器更新的必须是volatile类型变量, 确保线程之间共享变量时的立即可见性
3. 变量不能是static的, 必须要是实例变量, 因为Unsafe.objectFieldOffset()方法不支持静态变量(CAS操作本质上是
   通过对象实例的偏移量来直接进行赋值)
4. 更新器只能修改它可见范围内的变量, 因为更新器是通过反射来得到这个变量, 如果变量不可见就报错

如果要更新的变量是包装类型, 那么可以使用AtomicReferenceFieldUpdater来更新


Netty处理器重要概念:
1. Netty的处理器可以分为两类: 入站处理器与出站处理器
2. 入站处理器的顶层是ChannelInboundHandler, 出站处理器的顶层是ChannelOutboundHandler
3. 数据处理时常用的编解码器本质上都是处理器
4. 编解码器: 无论我们向网络中写入的数据是什么类型(int, char, String, 二进制等), 数据在网络中传递时,
   其实都是以字节流的形式呈现的; 将数据由原本的形式转换为字节流的操作称为编码(encode), 将字节流转换成
   原本的格式或是其它格式的操作成为解码(decode); 编解码统一称为codec
5. 编码: 本质上是一种出站处理器, 因此, 编码一定是一种ChannelOutboundHandler
6. 解码: 本质上是一种入站处理器, 因此, 解码一定是一种ChannelInboundHandler
7. 在Netty中, 编码器通常以xxxEncoder命名; 解码器通常以xxxDecoder命名


TCP粘包拆包:

关于Netty编解码器的重要结论:
1. 无论是编码器还是解码器, 其所接收的消息类型必须要与待处理的参数类型一致, 否则该编码器或解码器并不会被执行
2. 在解码器进行数据解码时, 一定要记得判断缓冲(ByteBuf)中的数据是否足够, 否则将产生一些问题

MessageToMessageCodec
ChannelDuplexHandler
CombinedChannelDuplexHandler




















