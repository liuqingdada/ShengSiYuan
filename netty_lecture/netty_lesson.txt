强势技能的学习



重视基础



节奏感



思维方式的改进



效率工具的使用



主动输出




gradlew -> gradle wrapper    gradle包装器, 使用此脚本在不安装gradle的情况下, 也可以构建工程


# 下载目录
distributionBase=GRADLE_USER_HOME
# 下载目录的相对路径
distributionPath=wrapper/dists
# 解压目录
zipStoreBase=GRADLE_USER_HOME
# 解压目录的相对路径
zipStorePath=wrapper/dists
# 需要的gradle版本
# xxx.bin   xxx.all(bin sources doc)
distributionUrl=https\://services.gradle.org/distributions/gradle-4.4-bin.zip
# 校验和
distributionSha256Sum=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

# shasum -a 256 file    ->    7a2c66d1a78f811d5f37d14630ad21cec5e77a2a4dc61e787e2257a6341016ce

# gradle wrapper
# gradle wrapper --gradle-version 4.4

# gradle clean build
# ./gradlew clean build






早期:
RMI: remote method invacation, 只针对java

client: stub

server: skeleton

序列化与反序列化  也叫做 编码与解码

Android AIDL

---------

RPC: Remote Procedure Call, 远程过程调用, RPC框架很多都是跨语言的

1. 定义一个接口说明文件(IDL), 描述了对象(结构体)、对象成员、接口方法等一系列信息

2. 通过RPC框架所提供的编译器将接口说明文件编译成具体语言文件

3. 在客户端与服务器端分别引入RPC编译器所生成的文件即可像调用本地方法一样调用远程方法


---------------

git submodule: git 仓库中的子仓库

git subtree




java.io
    最核心的概念是 Stream, 面向流的编程, Java 中, 一个流要么是输入流, 要么是输出流, 职责单一

java.nio
    3个核心概念: Selector、 Channel、 Buffer
    java.nio中, 我们是面向块 (block) 或者换红区 (buffer) 编程的


    Selector 可以关联多个 Channel, 通过事件切换到不同的 Channel
    Channel 可以理解为 io 中的 Stream, 但是 Channel 可以通过 Buffer 完成读和写
    Channel 关联一个 Buffer


    Buffer 本身是一块内存, 底层是个数组, 数据的 读写 都由 Buffer 实现
    除了数组之外, Buffer还提供了对数据结构化访问方式, 并且可以追踪到系统的读写过程
    注意: 相对方法的操作会修改 limit 和 position;  绝对方法完全忽略掉 limit 和 position



ASCII 美国信息交换标准代码    7 Bit表示一个字符  128 种

ISO-8859-1   8 Bit 表示一个字符  256 种

gb2312(2 byte 一个汉字)  gbk  gb18030

big5

unicode  Unicode 也有UCS-4规范, 就是用 4个字节来编码字符

以上都是编码方式

------------
UTF: Unicode 的实现方式, 基于 Unicode 的存储方式

Zero Width No-Break Spac
00 00 FE FF    = UTF-32, big-endian
FF FE 00 00    = UTF-32, little-endian
EF BB BF       = UTF-8,
FE FF          = UTF-16, big-endian
FF FE          = UTF-16, little-endian
---------------------

UTF-8  变长字节表示

BOM (Byte Order Mark), 某些系统引起的不可见字符(Zero Width No-Break Spac)
    Windows 下可选择带不带 BOM

====================
====================
====================


EventLoopGroup boosGroup = new NioEventLoopGroup(1);  // 连接线程
EventLoopGroup workerGroup = new NioEventLoopGroup(); // 其他操作的线程 (读、写、等等)
所以自定义Handler所处理的业务不应该耗时, 这样会卡 Netty 的线程
我么应该自定义线程组处理自己的业务


Reactor 模式的角色构成:

1. Handle: 句柄 or 描述符  表示操作系统提供的资源, 该资源表示一个个的操作系统事件, 比如文件描述符, 还有网络编程中的
           Socket 描述符此事件可以来源于内部(操作系统产生的定时器事件), 也可以来源于
           外部(client 和 server 之间的交互); Handle 是事件的发源地, 监听事件就是监听 Handle

2. Synchronous Event Demultiplexer: 同步事件分离器, 它本身是一个系统调用, 用于等待事件的发生,
                                    调用方在调用他的时候会被阻塞, 一直等到同步事件分离器上有事件产生为止
                                    对于 Linux 来说同步事件分离器值得就是常用的 I/O 多路复用机制,
                                    比如说 select、poll、epoll等
                                    在Java NIO中同步事件分离器对应的就是 Selector, 阻塞的方法就是 select

3. Event Handler: 事件处理器, 它本身由多个回调方法构成, 这些回调方法构成了与应用相关的对于某个事件的反馈机制
                  Java NIO 没有这个组件; 但是对应于 Netty 中提供的 ChannelHandler, 大量回调

4. Concrete Event Handler: 具体事件处理器, 事件处理器的具体实现, 由框架提供, 或者我们自定义,
                           它本身实现了事件处理器的各个回调方法, 还有我们的特定业务逻辑

5. Initiation Dispather 初始分发器, 实际上就是 Reactor 角色, 本身定义了一些规范, 这些规范用于控制事件的调度方式,
                        同时提供了应用进行事件处理器的注册、删除等设施
                        他会通过同步事件分离器来等待事件的发生, 一旦事件发生, 就会分离出一个事件, 然后调用事件处理器

----------

Reactorm模式的流程

1. 当应用向Initiation Dispatcher注册具体的事件处理器时，应用会标识出该事件处理器希望Initiation Dispatcher
   在某个事件发生时向其通知的该事件，该事件与Handle关联。

2. Initiation Dispatcher会要求每个事件处理器向其传递内部的Handle。该Handle向操作系统标识了事件处理器。

3. 当所有的事件处理器注册完毕后，应用会调用handle_events方法来启动Initiation Dispatcher的事件循环。
   这时，Initiation Dispatcher会将每个注册的事件管理器的Handle合并起来，并使用同步事件分离器等待这些事件的发生。
   比如说，TCP协议层会使用select同步事件分离器操作来等待客户端发送的数据到达连接的 socket handle 上

4. 当与某个事件源对应的Handle变为ready状态时（比如说，TCP socket变为等待读状态时），
   同步事件分离器就会通知Initiation Dispatcher。

5. Initiation Dispatcher会触发事件处理器的回调方法，从而响应这个处于ready状态的Handle。当事件发生时，
   Initiation Dispatcher会将被事件激活的Handle作为【key】来寻找并分发恰当的事件处理器回调方法。

6. Initiation Dispatcher会回调事件处理器的handle_events回调方法来执行特定于应用的功能（开发者自己所编写的功能），
   从而响应这个事件。所发生的事件类型可以作为该方法参数并被该方法内部使用来执行额外的特定于服务的分离与分发。





